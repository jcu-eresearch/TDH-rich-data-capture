<fieldset class="selectMappingFieldset" i18n:domain="deform">
    <!-- mapping -->
    <!--<legend tal:condition="field.title">${field.title}</legend>-->
    <ul>
        <li class="errorLi" tal:condition="field.errormsg">
            <h3 class="errorMsgLbl" i18n:translate="">There was a problem with this section</h3>

            <p class="errorMsg">${field.errormsg}</p>
        </li>
        <li class="section description" tal:condition="field.description">
            <div>${field.description}</div>
        </li>
        <input type="hidden" name="__start__" value="${field.name}:mapping"/>
        <label class="desc" for="${field.oid}">${field.title}<span tal:condition="field.required" class="req"
                                                                   id="req-${field.oid}">*</span>
        </label>
        <span id="select_mapping_options-${field.oid}" style="display: none;"><span tal:repeat="f field.children"
                                                                                    tal:replace="f.oid"/></span>
        <select name="${field.name}" title="${field.description}"
                onchange="setSelectedItem(value)"
                id="${field.oid}"
                tal:attributes="size field.widget.size"
                tal:attributes="class field.widget.css_class">
            <option tal:repeat="f field.children"
                    tal:attributes="selected f.oid == cstruct and 'selected';
                         class field.widget.css_class"
                    value="${f.oid}">${f.title}</option>
        </select>

        <div id="select_mapping_display-${field.oid}">
            <div tal:define="rndr field.renderer; tmpl field.widget.item_template"
                 tal:repeat="f field.children"
                 tal:replace="f.oid == cstruct and 'structure rndr(tmpl,field=f,cstruct=cstruct.get(f.name,null))'">
            </div>
        </div>

        <div id="select_mapping_item-${field.oid}" style="display: none;">
            <div tal:define="rndr field.renderer; tmpl field.widget.item_template"
                 tal:repeat="f field.children"
                 tal:replace="structure rndr(tmpl,field=f,cstruct=cstruct.get(f.name,null))"/>
        </div>
        <input type="hidden" name="__end__" value="${field.name}:mapping"/>
    </ul>
    <!-- /mapping -->
</fieldset>

<script type="text/javascript">
    storeItems();
    function storeItems() {
        var children = document.getElementById("select_mapping_item-${field.oid}").childNodes;

        var i = 0;
        var items = new Array();
        for (i; i < children.length; i++) {
            if (children[i].nodeType == 1) {
                items.push(children[i]);
            }
        }
        document.getElementById("select_mapping_item-${field.oid}").select_mapping_items = items;
    }

    setSelectedItem(document.getElementById("${field.oid}").value);
    function asetSelectedItem(selectedOID) {
        var items = document.getElementById("select_mapping_item-${field.oid}").select_mapping_items;

        var i = 0;
        for (i; i < items.length; i++) {
            if ("item-" + selectedOID == items[i].getAttribute("Id")) {
                document.getElementById("select_mapping_item-${field.oid}").innerHTML = items[i].innerHTML;
                break;
            }
        }

        var scripts = document.getElementById("select_mapping_item-${field.oid}").getElementsByTagName("script");
        i = 0;
        for (i; i < scripts.length; i++) {
            eval(scripts[i].innerHTML);
        }
    }

    function setSelectedItem(selectedOID) {
        alert(selectedOID);
        alert("${field.oid}");
        alert(document.getElementById("select_mapping_item-${field.oid}"));
        var itemsDiv = document.getElementById("select_mapping_item-${field.oid}");
        var content = document.getElementById("select_mapping_display-${field.oid}");
        var items = itemsDiv.childNodes;

        var i = 0;
        for (i; i < items.length; i++) {
            if (items[i].nodeType == 1 && "item-" + selectedOID == items[i].getAttribute("Id")) {
                content.innerHTML = items[i].innerHTML;
                break;
            }
        }

        var scripts = document.getElementById("select_mapping_item-${field.oid}").getElementsByTagName("script");
        i = 0;
        for (i; i < scripts.length; i++) {
            eval(scripts[i].innerHTML);
        }
    }

    function addSelectedItem(node) {
        var $oid_node = $(node).parent();
        var $proto_node = $oid_node.children('.deformProto').first();
        var $before_node = $oid_node.children('ul').first().children(
                '.deformInsertBefore');
        var min_len = parseInt($before_node.attr('min_len')||'0');
        var max_len = parseInt($before_node.attr('max_len')||'9999');
        var now_len = parseInt($before_node.attr('now_len')||'0');
        if (now_len < max_len) {
            deform.addSequenceItem($proto_node, $before_node);
            deform.processSequenceButtons($oid_node, min_len, max_len,
                    now_len+1);
        };
        return false;
    }

    function removeOldItem(clicked) {
        var $item_node = $(clicked).parent();
        var $oid_node = $item_node.parent().parent();
        var $before_node = $oid_node.find('.deformInsertBefore').first();
        var min_len = parseInt($before_node.attr('min_len')||'0');
        var max_len = parseInt($before_node.attr('max_len')||'9999');
        var now_len = parseInt($before_node.attr('now_len')||'0');
        if (now_len > min_len) {
            $before_node.attr('now_len', now_len - 1);
            $item_node.remove();
            deform.processSequenceButtons($oid_node, min_len, max_len,
                    now_len-1);
        };
        return false;
    }
</script>



