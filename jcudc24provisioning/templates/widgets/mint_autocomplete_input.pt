<span tal:omit-tag="">
    <tal:block define="placeholder field.schema.__dict__.get('placeholder') or nothing;
                           default_text cstruct or field.schema.default or placeholder">
        <div class="ui-widget">
            <input type="hidden" value="${default_text}" name="${field.name}" id="${field.oid}"/>
            <input type="text"
                   tal:attributes="size field.widget.size;"
                   id="${field.oid}-autocomplete"/>
            <a target="_blank" class="mint-more-info hidden" >More Info</a>

        </div>
        <input type="hidden" name="${field.name}-url" value="${field.widget.values}" id="${field.oid}-url"/>

        <style>
            .ui-autocomplete {
                max-height: 300px;
                overflow-y: auto;
                /* prevent horizontal scrollbar */
                overflow-x: hidden;
            }
                /* IE 6 doesn't support max-height
                * we use height instead, but this forces the menu to always be this tall
                */
            * html .ui-autocomplete {
                height: 300px;
            }
            .ui-autocomplete-loading {
                background: white url('http://jqueryui.com/images/ui-anim_basic_16x16.gif') right center no-repeat;
            }
        </style>
    <script tal:condition="field.widget.values" type="text/javascript">
        function get_name_from_identifier(oid, identifier) {
            $.ajax({
                url: "/search/" + identifier,
                dataType: "json",
                success: function( data ) {
                    var value = "";
                    if (identifier.match(/.*people.*/g)) {
                         value = data['result-metadata']['all']['Honorific'][0] + " " + data['result-metadata']['all']['Given_Name'][0] +
                                " "  + data['result-metadata']['all']['Family_Name'][0];
                    } else if (identifier.match(/.*activities.*/g)) {
                        value = data['dc:title'];
                    }

                    $("#" + oid + "-autocomplete")[0].value = value;

                    $('#' + oid).siblings("a.mint-more-info")[0].href = data['rdf:about'];
                    $('#' + oid).siblings("a.mint-more-info").removeClass('hidden');

                },
                error: function(jqXHR, textStatus, errorThrown) {
//                    alert(textStatus);
//                    alert(errorThrown);
                }
            });
        }

        function lookup_mint(url, request, response) {
            $.ajax({
                url: url + request.term,
                dataType: "json",
                success: function( data ) {
                    if (data.length == 0) {
                        return response([{
                            label: "None available",
                            value: "",
                            identifier: "",
                            about: ""
                        }]);
                    }

                    response($.map( data, function( item ) {
                        return {
                            label: item.label,
                            value: item.label,
                            identifier: item.value,
                            about: item.about
                        }
                    }));
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    return response([{
                        label: "None available",
                        value: "",
                        identifier: "",
                        about: ""
                    }]);
                },
                open: function() {
                    $( this ).removeClass( "ui-corner-all" ).addClass( "ui-corner-top" );
                },
                close: function() {
                    $( this ).removeClass( "ui-corner-top" ).addClass( "ui-corner-all" );
                }
            });
         }

        function partial(func /*, 0..n args */) {
          var args = Array.prototype.slice.call(arguments, 1);
          return function() {
            var allArguments = args.concat(Array.prototype.slice.call(arguments));
            return func.apply(this, allArguments);
          };
        }

        function autocomplete_selected(event, ui){
            $("#"+ event.target.id.replace("-autocomplete", ""))[0].value = ui.item.identifier;

            var more_info_element = $("#"+ event.target.id.replace("-autocomplete", "")).siblings("a.mint-more-info")[0];
            if (ui.item.about.length == 0) {
                $(more_info_element).addClass('hidden');
            } else {
                $(more_info_element).removeClass('hidden');
                more_info_element.href = ui.item.about;
            }
        }



        deform.addCallback(
                '${field.oid}',
                function (oid) {
                    get_name_from_identifier(oid, $("#"+oid)[0].value);
                    var lookup = partial(lookup_mint, ($('#' + oid + '-url')[0].value));

                    $('#' + oid +"-autocomplete").autocomplete({
                        source: lookup,
                        select: autocomplete_selected
                        });
                    $('#' + oid +"-autocomplete").autocomplete("option", ${options});
                }
        );

        </script>

    </tal:block>
</span>
