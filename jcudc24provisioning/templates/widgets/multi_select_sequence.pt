<!--
    multi_select_sequence is a template for a mapping_schema that conditionally outputs fields based on the selected option
    in a standard select box.  The items to be selected from are the mapping_schema's children.

    This template is based directly off the sequence.pt (after modifications - see the modified sequence.pt for details)
-->

<div class="deformSeq multi_select_sequence"
     id="${field.oid}"
     tal:define="rndr field.renderer;
                 item_tmpl field.widget.item_template;
                 min_len field.widget.min_len or 0;
                 max_len field.widget.max_len or 100000;
                 now_len len(subfields);
                 prototype field.widget.prototype(field);
                 data field.schema.__dict__['children'][0].children[2].data">

    <!-- sequence -->
    <select class="first_field half_width">
        <option tal:repeat="(key) data"
                tal:attributes="selected key == cstruct and 'selected';
                                 class field.widget.css_class"
                value="${key}">${key}
        </option>
    </select>
    <br/>
    <select class="second_field half_width"></select>
    <br/>
    <select class="third_field half_width"></select>

    <button type="button"
            class="deformSeqAdd"
            id="${field.oid}-seqAdd"
            onclick="deform.appendSequenceItem(this); buttonPressed(this);">
        <small id="${field.oid}-addtext">${add_subitem_text}</small>
    </button>

    <input type="hidden" name="__start__" value="${field.name}:sequence"
           class="deformProto"
           tal:attributes="prototype prototype"/>

    <ul id="seq_items-${field.oid}">

        <div tal:repeat="tup subfields"
             tal:replace="structure rndr(item_tmpl, field=tup[1], cstruct=tup[0],
                      parent=field)"/>

    <span class="deformInsertBefore"
          tal:attributes="min_len min_len; 
                          max_len max_len; 
                          now_len now_len"></span>

    </ul>


    <div id="second_level_data" class="hidden">
            <span tal:repeat="(key, values) data.items()"
                  tal:attributes="class 'second_level_data-'+key">
                <option tal:repeat="(second_key) values"
                        tal:attributes="selected second_key == cstruct and 'selected';
                         class field.widget.css_class"
                        value="${second_key}">${second_key}
                </option>
            </span>
    </div>
    <div id="third_level_data" class="hidden">
            <span tal:repeat="(key, values) data.items()">
                <span tal:repeat="(second_key, second_values) values.items()"
                      tal:attributes="class 'third_level_data-'+second_key">
                    <option tal:repeat="(third_key) second_values"
                            tal:attributes="selected third_key == cstruct and 'selected';
                             class field.widget.css_class"
                            value="${third_key}">${third_key}
                    </option>
                </span>
            </span>
    </div>


    <script type="text/javascript">
        deform.addCallback(
                '${field.oid}',
                function (oid) {
                    oid_node = $('#' + oid);
                    deform.processSequenceButtons(oid_node, ${min_len},
                            ${max_len}, ${now_len});
                }
        )

        deform.addCallback(
                '${field.oid}',
                function (oid) {
                    var oid_node = $('#' + oid);
                    showAdd(oid, false);

                    var first_select = oid_node.find(".first_field")[0];
                    var second_select = oid_node.find(".second_field")[0];
                    var third_select = oid_node.find(".third_field")[0];

                    first_select.onchange = function () {
                        updateSecondFields(oid);
                        showAdd(oid, false);
                    };
                    second_select.onchange = function () {
                        updateThirdFields(oid);
                        showAdd(oid, true);
                    };
                    third_select.onchange = function () {
                        showAdd(oid, true);
                    };
                }
        )

    </script>

    <input type="hidden" name="__end__" value="${field.name}:sequence"/>

    <!-- /sequence -->

</div>
