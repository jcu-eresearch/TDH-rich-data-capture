<span tal:omit-tag="">
    <tal:block define="placeholder field.schema.__dict__.get('placeholder') or nothing;
                       default_text cstruct or field.schema.default or placeholder">

        <input type="text" name="${field.name}" value="${default_text}"
               tal:attributes="size field.widget.size;
                               class (field.widget.css_class or '') + (default_text == field.schema.__dict__.get('placeholder') and ' placeholder_text' or '')"
               onfocus="if (value == '${field.schema.__dict__.get('placeholder')}') {className = className.replace( /(?:^|\s)placeholder_text(?!\S)/g , '' ); value='';}"
               onblur="if (value == '') {value='${placeholder}'; className += ' placeholder_text';}"
               id="${field.oid}"/>
        <script tal:condition="field.widget.mask" type="text/javascript">
            deform.addCallback(
                    '${field.oid}',
                    function (oid) {
                        $("#" + oid).mask("${field.widget.mask}",
                                {placeholder:"${field.widget.mask_placeholder}"});
                    });
        </script>
        <script tal:condition="exists:field.widget.regex_mask" type="text/javascript">
            deform.addCallback(
                    '${field.oid}',
                    function (oid) {
                        try {
                            var pattern = new RegExp("${field.widget.regex_mask}");

                            var timer = window.setInterval(function(){
                                if ($.fn.regexMask != undefined) {
                                    window.clearInterval(timer);
                                        $("#" + oid).regexMask(pattern);
                                }
                            }, 100);
                        } catch (e) {
                            alert(e);
                        }
                    });


        </script>
        <script tal:condition="field.schema.__dict__.get('placeholder')" type="text/javascript">
            deform.addCallback(
                    '${field.oid}',
                    function (oid) {
                        submitClearsDefaultValues(oid, "${field.schema.__dict__.get('placeholder')}");
                    });
        </script>
    </tal:block>
</span>
