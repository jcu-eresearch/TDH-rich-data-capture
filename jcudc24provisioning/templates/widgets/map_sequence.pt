<!--
    multi_select_sequence is a template for a sequenceSchema that provides an openlayers map with the ability to add,
    delete, edit and modify an expandable list of features (lines, points or polygons) either on using the map or by
    editing the text.

    This template is based directly off the sequence.pt (after modifications - see the modified sequence.pt for details)
-->

<div class="deformSeq location_map"
     id="${field.oid}"
     tal:define="rndr field.renderer;
                 item_tmpl field.widget.item_template;
                 min_len field.widget.min_len or 0;
                 max_len field.widget.max_len or 100000;
                 now_len len(subfields);
                 prototype field.widget.prototype(field)">

<div class="location_map" style="width: 100%; height: 300px;"></div>

<!-- sequence -->

<input type="hidden" name="__start__" value="${field.name}:sequence"
       class="deformProto"
       tal:attributes="prototype prototype"/>

<ul id="seq_items-${field.oid}" class="full_width">

    <div tal:repeat="tup subfields"
         tal:replace="structure rndr(item_tmpl, field=tup[1], cstruct=tup[0],
                      parent=field)"/>

    <span class="deformInsertBefore"
          tal:attributes="min_len min_len; 
                          max_len max_len; 
                          now_len now_len"></span>

</ul>

<a
        class="deformSeqAdd"
        id="${field.oid}-seqAdd"
        onclick="appendSequenceItem(this);">
    <small id="${field.oid}-addtext">${add_subitem_text}</small>
</a>

<script type="text/javascript" src="http://maps.google.com/maps/api/js?v=3&amp;sensor=false"></script>
<script type="text/javascript">
deform.addCallback(
        '${field.oid}',
        function (oid) {
            var map_div = $('#' + oid).children('.location_map')[0];

            var map = new OpenLayers.Map(map_div, {
                projection:"EPSG:900913",
                displayProjection:"EPSG:4326",
                units:'m',
                numZoomLevels:18
            });

            if (!document.location_maps) {
                document.location_maps = [];
            }

            document.location_maps.push(map);

            // create Google Mercator layers
            var gphy = new OpenLayers.Layer.Google(
                    "Google Physical",
                    {type:google.maps.MapTypeId.TERRAIN}
            );
            var gmap = new OpenLayers.Layer.Google(
                    "Google Streets", // the default
                    {numZoomLevels:20}
            );
            var ghyb = new OpenLayers.Layer.Google(
                    "Google Hybrid",
                    {type:google.maps.MapTypeId.HYBRID, numZoomLevels:20}
            );
            var gsat = new OpenLayers.Layer.Google(
                    "Google Satellite",
                    {type:google.maps.MapTypeId.SATELLITE, numZoomLevels:22}
            );

            // create a vector layer for drawing
            var vector = new OpenLayers.Layer.Vector("Research Locations");
            vector.events.register("featuremodified", vector, modifyFeature);
            vector.events.register("featureadded", vector, featureInserted);

            map.addLayers([
                gphy, gmap, gsat, ghyb, vector
            ]);
            map.addControl(new OpenLayers.Control.LayerSwitcher());
            //        map.addControl(new OpenLayers.Control.EditingToolbar(vector));
            //                            map.addControl(new OpenLayers.Control.Permalink());
            map.addControl(new OpenLayers.Control.MousePosition());

            var panelControls = [
                new OpenLayers.Control.SelectFeature(vector, {title:"Delete", onSelect:deleteFeature, 'displayClass':'olControlDeleteFeature'}),
                new OpenLayers.Control.ModifyFeature(vector, {title:"Move points", mode:OpenLayers.Control.ModifyFeature.RESHAPE}),
                new OpenLayers.Control.DrawFeature(vector, OpenLayers.Handler.Point, {title:"Draw points", 'displayClass':'olControlDrawFeaturePoint'}),
                new OpenLayers.Control.DrawFeature(vector, OpenLayers.Handler.Path, {title:"Draw lines", 'displayClass':'olControlDrawFeaturePath'}),
                new OpenLayers.Control.DrawFeature(vector, OpenLayers.Handler.Polygon, {title:"Draw shapes", 'displayClass':'olControlDrawFeaturePolygon'}),
                new OpenLayers.Control.Navigation({title:"Navigate only"})
            ];
            var toolbar = new OpenLayers.Control.Panel({
                displayClass:'olControlEditingToolbar',
                defaultControl:panelControls[0]
            });
            toolbar.addControls(panelControls);
            map.addControl(toolbar);

            var proj = new OpenLayers.Projection("EPSG:4326");
            var point = new OpenLayers.LonLat(135, -25);
            map.setCenter(point.transform(proj, map.getProjectionObject()), 3);


            addMapFeatures(oid);
        }
);

function findMapLayerFromFeature(feature, map) {
    var i = 0, j = 0, k = 0;
    if (typeof map === "undefined") {
        for (i; i < document.location_maps.length; i++) {
            for (j; j < document.location_maps[i].layers.length; j++) {
                if ((OpenLayers.Layer.Vector.prototype.isPrototypeOf(document.location_maps[i].layers[j]))) {
                    for (k; k < document.location_maps[i].layers[j].features.length; k++) {
                        if (document.location_maps[i].layers[j].features[k] == feature) {
                            return document.location_maps[i].layers[j];
                        }
                    }
                }
            }
        }
    } else {
        for (j; j < document.location_maps[i].layers.length; j++) {
            if ((OpenLayers.Layer.Vector.prototype.isPrototypeOf(document.location_maps[i].layers[j]))) {
                for (k; k < document.location_maps[i].layers[j].features.length; k++) {
                    if (document.location_maps[i].layers[j].features[k] == feature) {
                        return document.location_maps[i].layers[j];
                    }
                }
            }
        }
    }

    return null;
}

function findMapFromLayer(layer) {
    var i = 0, j = 0, k = 0;
    for (i; i < document.location_maps.length; i++) {
        for (j; j < document.location_maps[i].layers.length; j++) {
            if (document.location_maps[i].layers[j] == layer) {
                return document.location_maps[i];
            }
        }
    }
    return null;
}

function appendSequenceItem(add_link) {
    deform.appendSequenceItem(add_link);
    var fields = $(add_link.parentNode).children('ul').first().find("input");
    fields[fields.length - 1].setAttribute("onblur", "locationTextModified(this)");
    fields[fields.length - 1].map_div = $(add_link.parentNode).children(".location_map")[0];

    var deleteLink = $(fields[fields.length - 1].parentNode).children('.deformClosebutton')[0];
    deleteLink.setAttribute("onclick", deleteLink.getAttribute("onclick") + " deleteFeature($(this.parentNode).children('input')[0].feature);");
}

function addMapFeatures(oid) {
    var fields = $("#" + oid).children('ul').first().find("input");
    var map_div = $("#" + oid).children(".location_map")[0];

    var i = 0;
    for (i; i < fields.length; i++) {
        fields[i].map_div = map_div;
        locationTextModified(fields[i]);
    }

}

function locationTextModified(input) {
    var geometry_type = input.value.substr(0, input.value.indexOf("("));
    var displayProj = new OpenLayers.Projection("EPSG:4326");
    var proj = new OpenLayers.Projection("EPSG:900913");

    var newGeometry;

    var lat_long_match = "[+-]?\d*\.?\d* [+-]?\d*\.?\d*";
    var point_match = /point\([+-]?\d*\.?\d* [+-]?\d*\.?\d*\)/i;
    var poly_match = /polygon\(\(([+-]?\d*\.?\d*\s[+-]?\d*\.?\d*,?\s?)*\)\)/i;
    var line_match = /linestring\(([+-]?\d*\.?\d*\s[+-]?\d*\.?\d*,?\s?)*\)/i;

    if (input.value.match(point_match)) {
        var points = input.value.trim().substring(geometry_type.length + 1, input.value.trim().length - 1).split(" ");
        newGeometry = new OpenLayers.Geometry.Point(new Number(points[0]), new Number(points[1]));
    } else if (input.value.match(poly_match)) {
        var text_points = input.value.trim().substring(geometry_type.length + 2, input.value.trim().length - 2).split(",");
        var points = [];
        var i = 0;
        for (i; i < text_points.length; i++) {
            points.push(new OpenLayers.Geometry.Point(new Number(text_points[i].split(" ")[0]), new Number(text_points[i].split(" ")[1])));
        }
        newGeometry = new OpenLayers.Geometry.Polygon(new OpenLayers.Geometry.LinearRing(points));
    } else if (input.value.match(line_match)) {
        var text_points = input.value.trim().substring(geometry_type.length + 1, input.value.trim().length - 1).split(",");
        var points = [];
        var i = 0;
        for (i; i < text_points.length; i++) {
            points.push(new OpenLayers.Geometry.Point(new Number(text_points[i].split(" ")[0]), new Number(text_points[i].split(" ")[1])));
        }
        newGeometry = new OpenLayers.Geometry.LineString(points);
    } else {
        input.style.background = "#ffaaaa";
        return;
    }

    newGeometry.transform(displayProj, proj);
    input.style.background = "white";

    var layer;
    var j = 0, k = 0;
    for (i = 0; i < document.location_maps.length; i++) {
        if (document.location_maps[i].div == input.map_div) {
            for (j; j < document.location_maps[i].layers.length; j++) {
                if ((OpenLayers.Layer.Vector.prototype.isPrototypeOf(document.location_maps[i].layers[j]))) {
                    layer = document.location_maps[i].layers[j];
                }
            }
        }
    }

    if (input.feature) {
        layer.removeFeatures(input.feature);
        input.feature = new OpenLayers.Feature.Vector(newGeometry);
        layer.addFeatures(input.feature);

    } else {
        input.feature = new OpenLayers.Feature.Vector(newGeometry);
        layer.addFeatures(input.feature);
    }
}

function modifyFeature(object) {
    var feature = object.feature;
    var map = object.object.map;
    var layer = findMapLayerFromFeature(feature, map);
    var oid_node = $(map.div.parentNode);
    var fields = oid_node.children('ul').first().find("input");

    var displayProj = new OpenLayers.Projection("EPSG:4326");
    var proj = new OpenLayers.Projection("EPSG:900913");
    var geometry = feature.geometry.clone();
    geometry.transform(map.getProjectionObject(), displayProj);

    var i = 0;
    for (i; i < fields.length; i++) {
        if (fields[i].feature == feature) {
            fields[i].value = geometry;
        }
    }
}

function deleteFeature(feature) {
    var layer = findMapLayerFromFeature(feature);
    var map = findMapFromLayer(layer);
    var displayProj = new OpenLayers.Projection("EPSG:4326");

    var oid_node = $(map.div.parentNode);
    var geometry = feature.geometry.clone();
    geometry.transform(map.getProjectionObject(), displayProj);

    var fields = oid_node.children('ul').first().find("input");
    var i = 0;
    for (i; i < fields.length; i++) {
        if (fields[i].value == geometry.toString()) {
            deform.removeSequenceItem(fields[i]);
        }
    }

    layer.destroyFeatures(feature);
}

function featureInserted(object) {
    var feature = object.feature;
    var vertices = "";
    var displayProj = new OpenLayers.Projection("EPSG:4326");
    var proj = new OpenLayers.Projection("EPSG:900913");
    var map = object.object.map;
    var layer = findMapLayerFromFeature(feature, map);

    var oid_node = $(map.div.parentNode);
    var fields = oid_node.children('ul').first().find("input");

    var i = 0;
    for (i; i < fields.length; i++) {
        var tmp = feature.geometry.clone();
        tmp.transform(map.getProjectionObject(), displayProj);
        if (fields[i].feature == feature) {
            return;
        }
    }


//            var i = 0, j = 0;
//            for (i; i < layer.features.length; i++) {
//                /*alert((OpenLayers.Geometry.Polygon.prototype.isPrototypeOf(layer.features[i].geometry)));*/
//                alert(layer.features[i].geometry);
//                alert(displayProj + " : " + proj + " : " + map.getProjection() + " : " + map.getProjectionObject());
//                for (j; j < layer.features[i].geometry.getVertices().length; j++) {
//                    vertices += layer.features[i].geometry.getVertices()[j].transform(map.getProjectionObject(),displayProj) + ", ";
//                }
//            }
    /*   alert(vertices);*/

    /* Add the feature */
    appendSequenceItem(oid_node.children(".deformSeqAdd")[0]);

    fields = oid_node.children('ul').first().find("input");
    var geometry = feature.geometry.clone();
    geometry.transform(map.getProjectionObject(), displayProj);

    fields[fields.length - 1].value = geometry;
    fields[fields.length - 1].feature = feature;
}

deform.addCallback(
        '${field.oid}',
        function (oid) {
            oid_node = $('#' + oid);
            deform.processSequenceButtons(oid_node, ${min_len},
                    ${max_len}, ${now_len});
        }
);

</script>

<input type="hidden" name="__end__" value="${field.name}:sequence"/>

<!-- /sequence -->

</div>

        
        